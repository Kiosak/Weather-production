{"version":3,"sources":["components/info.js","components/form.js","components/werther.js","App.js","serviceWorker.js","index.js"],"names":["Info","react_default","a","createElement","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","className","error","city","country","temp","pressure","sunrise","sunset","API_KEY","transformTime","time","date","Date","setTime","getHours","getMinutes","App","state","undefined","getWeather","_callee","e","api_url","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","sys","stop","info","components_form","this","werther","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RASeA,SAPF,kBACXC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,kDCIWC,EAPF,SAAAC,GAAK,OAChBJ,EAAAC,EAAAC,cAAA,QAAMG,SAAUD,EAAME,eACpBN,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3CT,EAAAC,EAAAC,cAAA,gCCcWQ,EAjBC,SAAAN,GAAK,OACnBJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGS,UAAU,SAASP,EAAMQ,OAC3BR,EAAMS,OAAST,EAAMQ,OACpBZ,EAAAC,EAAAC,cAAA,OAAKS,UAAU,eACbX,EAAAC,EAAAC,cAAA,sBACaE,EAAMS,KADnB,KAC2BT,EAAMU,SAEjCd,EAAAC,EAAAC,cAAA,yBAAiBE,EAAMW,MACvBf,EAAAC,EAAAC,cAAA,sBAAcE,EAAMY,SAApB,QACAhB,EAAAC,EAAAC,cAAA,qBAAaE,EAAMa,SACnBjB,EAAAC,EAAAC,cAAA,oBAAYE,EAAMc,WCPpBC,EAAU,mCAEhB,SAASC,EAAcC,GACrB,IAAMC,EAAO,IAAIC,KAEjB,OADAD,EAAKE,QAAQH,GACNC,EAAKG,WAAa,IAAMH,EAAKI,iBAuEvBC,6MAnEbC,MAAQ,CACNb,UAAMc,EACNhB,UAAMgB,EACNf,aAASe,EACTb,cAAUa,EACVZ,aAASY,EACTX,YAAQW,EACRjB,WAAOiB,KAGTC,iDAAa,SAAAC,EAAMC,GAAN,IAAAnB,EAAAoB,EAAAC,EAAA,OAAAC,EAAAlC,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACXP,EAAEQ,mBACI3B,EAAOmB,EAAES,OAAOC,SAAS7B,KAAK8B,OAFzB,CAAAN,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAKaK,MAAK,qDAAAC,OAC4BhC,EAD5B,WAAAgC,OAC0C1B,EAD1C,kBALlB,cAKHc,EALGI,EAAAS,KAAAT,EAAAE,KAAA,EAQUN,EAAQc,OARlB,OAQHb,EARGG,EAAAS,KAUTE,EAAKC,SAAS,CACZlC,KAAMmB,EAAKgB,KAAKnC,KAChBF,KAAMqB,EAAK1B,KACXM,QAASoB,EAAKiB,IAAIrC,QAClBE,SAAUkB,EAAKgB,KAAKlC,SACpBC,QAASG,EAAcc,EAAKiB,IAAIlC,SAChCC,OAAQE,EAAcc,EAAKiB,IAAIjC,QAC/BN,WAAOiB,IAjBAQ,EAAAE,KAAA,iBAoBTS,EAAKC,SAAS,CACZrC,MAAO,qBArBA,yBAAAyB,EAAAe,SAAArB,oIA2BX,OACE/B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKS,UAAU,WACbX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,QACbX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACbX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,2BACbX,EAAAC,EAAAC,cAACmD,EAAD,OAEFrD,EAAAC,EAAAC,cAAA,OAAKS,UAAU,2BACbX,EAAAC,EAAAC,cAACoD,EAAD,CAAMhD,cAAeiD,KAAKzB,aAC1B9B,EAAAC,EAAAC,cAACsD,EAAD,CACEzC,KAAMwC,KAAK3B,MAAMb,KACjBF,KAAM0C,KAAK3B,MAAMf,KACjBC,QAASyC,KAAK3B,MAAMd,QACpBE,SAAUuC,KAAK3B,MAAMZ,SACrBC,QAASsC,KAAK3B,MAAMX,QACpBC,OAAQqC,KAAK3B,MAAMV,OACnBN,MAAO2C,KAAK3B,MAAMhB,qBAxDpB6C,IAAMC,WCFJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6168fa0d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Info = () => (\r\n  <div>\r\n    <h2>Weather app</h2>\r\n    <p>Find out the weather in your city!</p>\r\n  </div>\r\n);\r\n\r\nexport default Info;\r\n","import React from 'react';\r\n\r\nconst Form = props => (\r\n  <form onSubmit={props.weatherMethod}>\r\n    <input type=\"text\" name=\"city\" placeholder=\"City\" />\r\n    <button>Get weather!</button>\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst Weather = props => (\r\n  <div>\r\n    <p className=\"error\">{props.error}</p>\r\n    {props.city && !props.error && (\r\n      <div className=\"infoWeather\">\r\n        <p>\r\n          Location: {props.city}, {props.country}\r\n        </p>\r\n        <p>Temperature: {props.temp}</p>\r\n        <p>Pressure: {props.pressure} GPa</p>\r\n        <p>Sunrise: {props.sunrise}</p>\r\n        <p>Sunset: {props.sunset}</p>\r\n      </div>\r\n    )}\r\n  </div>\r\n);\r\n\r\nexport default Weather;\r\n","import React from 'react';\nimport './App.css';\nimport Info from './components/info';\nimport Form from './components/form';\nimport Weather from './components/werther';\n\nconst API_KEY = 'feb03ec0d1b37b92ac63e488bf612ad6';\n\nfunction transformTime(time) {\n  const date = new Date();\n  date.setTime(time);\n  return date.getHours() + ':' + date.getMinutes();\n}\n\nclass App extends React.Component {\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    pressure: undefined,\n    sunrise: undefined,\n    sunset: undefined,\n    error: undefined,\n  };\n\n  getWeather = async e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n\n    if (city) {\n      const api_url = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`\n      );\n      const data = await api_url.json();\n\n      this.setState({\n        temp: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        pressure: data.main.pressure,\n        sunrise: transformTime(data.sys.sunrise),\n        sunset: transformTime(data.sys.sunset),\n        error: undefined,\n      });\n    } else {\n      this.setState({\n        error: 'Enter city name!',\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-sm-12 col-md-5 info\">\n                  <Info />\n                </div>\n                <div className=\"col-sm-12 col-md-7 form\">\n                  <Form weatherMethod={this.getWeather} />\n                  <Weather\n                    temp={this.state.temp}\n                    city={this.state.city}\n                    country={this.state.country}\n                    pressure={this.state.pressure}\n                    sunrise={this.state.sunrise}\n                    sunset={this.state.sunset}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}